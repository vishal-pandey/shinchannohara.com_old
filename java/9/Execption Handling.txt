An exception is an abnormal
condition that arises in a code sequence at run time.

In other words, an exception is a
run-time error.

Once an exception
is thrown, program control transfers out of the try block into the catch block.

Once the catch statement has executed,
program control continues with the next line in the program following the entire try/catch
mechanism.

The scope of the catch clause is restricted to
those statements specified by the immediately preceding try statement.

The statements that are protected by try must be surrounded
by curly braces. (That is, they must be within a block.) You cannot use try on a single statement.

The goal of most well-constructed catch clauses should be to resolve the exceptional
condition and then continue on as if the error had never happened.

You can display this description in a println( )
statement by simply passing the exception as an argument.


multiple catch clause

When an exception is thrown, each catch statement is inspected in order,
and the first one whose type matches that of the exception is executed. After one catch
statement executes, the others are bypassed, and execution continues after the try/catch
block.

When you use multiple catch statements, it is important to remember that exception
subclasses must come before any of their superclasses.This is because a catch statement
that uses a superclass will catch exceptions of that type plus any of its subclasses. Thus, a
subclass would never be reached if it came after its superclass.Further, in Java, unreachable
code is an error.

Nested try

If an
inner try statement does not have a catch handler for a particular exception, the stack is
unwound and the next try statement’s catch handlers are inspected for a match. This continues
until one of the catch statements succeeds, or until all of the nested try statements are exhausted.



Throw

it is possible for your program to throw an exception explicitly, using the throw
statement.

The flow of execution stops immediately after the throw statement;

The nearest enclosing try block is inspected to see if it has a
catch statement that matches the type of exception. If it does find a match, control is
transferred to that statement. If not, then the next enclosing try statement is inspected, and
so on. If no matching catch is found, then the default exception handler halts the program
and prints the stack trace.

throws

If a method is capable of causing an exception that it does not handle, it must specify this
behavior so that callers of the method can guard themselves against that exception. You do
this by including a throws clause in the method’s declaration.

finally

finally creates a block of code that will be executed after a try/catch block has
completed and before the code following the try/catch block.

The finally block will
execute whether or not an exception is thrown. If an exception is thrown, the finally
block will execute even if no catch statement matches the exception.

The finally clause is optional. However, each try statement requires at
least one catch or a finally clause.

 